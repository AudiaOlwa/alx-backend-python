/*pipeline {
    agent any

    environment {
        // Identifiants GitHub
        GIT_CREDENTIALS = credentials('github-creds')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/AudiaOlwa/alx-backend-python.git',
                    credentialsId: "${GIT_CREDENTIALS}"
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                cd messaging_app/requirements.txt
                python3 -m venv venv
                source venv/bin/activate
                pip3 install --upgrade pip
                pip3 install -r requirements.txt
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh '''
                source venv/bin/activate
                pytest --maxfail=1 --disable-warnings --junitxml=test-results.xml
                '''
            }
        }

        stage('Test Report') {
            steps {
                junit 'test-results.xml'
            }
        }
    }
}*/


pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-creds')
        IMAGE_NAME = "audiaolwa/messaging_app"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/AudiaOlwa/alx-backend-python.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh "pip3 install -r messaging_app/requirements.txt"
            }
        }

        stage('Run Tests') {
            steps {
                sh "pytest --maxfail=1 --disable-warnings -q"
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${IMAGE_NAME}:latest ./messaging_app"
            }
        }

        stage('Login to Docker Hub') {
            steps {
                sh """echo "${DOCKERHUB_CREDENTIALS_PSW}" | docker login -u "${DOCKERHUB_CREDENTIALS_USR}" --password-stdin"""
            }
        }

        stage('Push Docker Image') {
            steps {
                sh "docker push ${IMAGE_NAME}:latest"
            }
        }
    }
}

